#include <string>
#include <vector>
#include <map>

#include "connspec.h"

namespace lcb
{

static const char _connspec_trans_keys[] = {
    1, 0,  9, 34, 9,  34, 2,  40, 18, 40, 9, 16, 24, 37, 28, 40, 28, 40, 26, 38, 21, 33, 22, 34, 9,  34, 9,  34,
    9, 34, 9, 34, 17, 17, 9,  34, 9,  34, 9, 34, 9,  34, 17, 17, 9,  34, 9,  34, 9,  34, 9,  34, 17, 17, 9,  34,
    9, 34, 9, 34, 9,  34, 17, 17, 9,  34, 9, 34, 9,  34, 9,  34, 17, 17, 9,  34, 9,  34, 9,  34, 9,  34, 17, 17,
    9, 34, 7, 34, 9,  16, 7,  16, 9,  16, 7, 16, 9,  16, 9,  30, 30, 30, 9,  30, 9,  30, 9,  30, 7,  7,  7,  16,
    7, 16, 7, 14, 7,  7,  7,  16, 7,  16, 7, 14, 7,  34, 9,  34, 17, 17, 9,  34, 9,  34, 9,  34, 9,  34, 9,  34,
    7, 34, 7, 34, 7,  34, 7,  34, 7,  34, 9, 34, 9,  34, 9,  34, 7,  34, 7,  34, 9,  34, 17, 30, 9,  34, 9,  34,
    7, 34, 7, 34, 7,  34, 7,  34, 7,  34, 9, 34, 9,  34, 7,  34, 7,  34, 9,  34, 17, 30, 9,  34, 9,  34, 7,  34,
    7, 34, 7, 34, 7,  34, 7,  34, 9,  34, 9, 34, 7,  34, 7,  34, 9,  34, 17, 30, 9,  34, 9,  34, 7,  34, 7,  34,
    7, 34, 7, 34, 7,  34, 9,  34, 9,  34, 7, 34, 7,  34, 9,  34, 17, 30, 9,  34, 9,  34, 7,  34, 7,  34, 7,  34,
    7, 34, 7, 34, 9,  34, 9,  34, 7,  34, 7, 34, 9,  34, 17, 30, 9,  34, 9,  34, 7,  34, 7,  34, 7,  34, 7,  34,
    7, 34, 9, 34, 17, 17, 9,  34, 7,  34, 7, 34, 9,  34, 17, 30, 9,  34, 9,  34, 7,  34, 7,  34, 7,  34, 7,  34,
    7, 34, 9, 34, 8,  16, 8,  8,  0,  40, 0, 40, 0,  40, 2,  40, 19, 19, 3,  40, 3,  19, 3,  19, 0,  40, 0,  40,
    0, 40, 0, 40, 0,  40, 0,  40, 0,  40, 0, 40, 5,  19, 5,  19, 5,  19, 5,  19, 5,  39, 5,  19, 5,  39, 5,  19,
    5, 19, 5, 19, 5,  19, 5,  19, 5,  19, 0, 40, 0,  40, 0,  40, 0,  40, 0,  40, 0,  40, 0,  40, 0,  40, 0,  40,
    0, 40, 0, 40, 0,  40, 0,  40, 0,  40, 0, 40, 5,  19, 0,  40, 0};

static const signed char _connspec_char_class[] = {
    0,  1,  1,  0,  2,  3,  0,  0,  0,  0,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 16,
    16, 17, 5,  1,  18, 1,  19, 1,  20, 20, 21, 22, 20, 20, 23, 24, 23, 23, 23, 23, 25, 23, 23, 26,
    23, 23, 27, 28, 23, 23, 23, 23, 23, 23, 29, 1,  30, 1,  31, 1,  32, 32, 33, 34, 32, 32, 35, 36,
    35, 35, 35, 35, 37, 35, 35, 38, 35, 35, 39, 40, 35, 35, 35, 35, 35, 35, 1,  1,  1,  0,  0};

static const short _connspec_index_offsets[] = {
    0,    0,    26,   52,   91,   114,  122,  136,  149,  162,  175,  188,  201,  227,  253,  279,  305,  306,  332,
    358,  384,  410,  411,  437,  463,  489,  515,  516,  542,  568,  594,  620,  621,  647,  673,  699,  725,  726,
    752,  778,  804,  830,  831,  857,  885,  893,  903,  911,  921,  929,  951,  952,  974,  996,  1018, 1019, 1029,
    1039, 1047, 1048, 1058, 1068, 1076, 1104, 1130, 1131, 1157, 1183, 1209, 1235, 1261, 1289, 1317, 1345, 1373, 1401,
    1427, 1453, 1479, 1507, 1535, 1561, 1575, 1601, 1627, 1655, 1683, 1711, 1739, 1767, 1793, 1819, 1847, 1875, 1901,
    1915, 1941, 1967, 1995, 2023, 2051, 2079, 2107, 2133, 2159, 2187, 2215, 2241, 2255, 2281, 2307, 2335, 2363, 2391,
    2419, 2447, 2473, 2499, 2527, 2555, 2581, 2595, 2621, 2647, 2675, 2703, 2731, 2759, 2787, 2813, 2839, 2867, 2895,
    2921, 2935, 2961, 2987, 3015, 3043, 3071, 3099, 3127, 3153, 3154, 3180, 3208, 3236, 3262, 3276, 3302, 3328, 3356,
    3384, 3412, 3440, 3468, 3494, 3503, 3504, 3545, 3586, 3627, 3666, 3667, 3705, 3722, 3739, 3780, 3821, 3862, 3903,
    3944, 3985, 4026, 4067, 4082, 4097, 4112, 4127, 4162, 4177, 4212, 4227, 4242, 4257, 4272, 4287, 4302, 4343, 4384,
    4425, 4466, 4507, 4548, 4589, 4630, 4671, 4712, 4753, 4794, 4835, 4876, 4917, 4932, 0};

static const short _connspec_indicies[] = {
    2,   2,   2,   2,   2,   2,   2,   2,   0,   0,   0,   2,   2,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    2,   2,   2,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   0,   3,   3,   3,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   3,   3,   3,   5,   0,   0,   0,   5,   5,   0,   5,   5,   5,   5,   5,   5,   5,   5,   0,   0,
    0,   5,   5,   5,   5,   5,   5,   5,   5,   5,   0,   0,   5,   5,   5,   5,   5,   5,   5,   5,   5,   5,   7,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   6,   6,   6,   6,   6,   6,   6,   6,   6,   6,   9,
    10,  10,  10,  10,  10,  11,  9,   13,  14,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   13,  14,  15,  0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   15,  16,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    16,  17,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   17,  18,  0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   18,  19,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   19,  21,  21,  21,  21,  21,  21,
    21,  21,  22,  0,   0,   21,  21,  21,  0,   0,   0,   0,   0,   0,   0,   0,   0,   21,  21,  21,  23,  23,  23,
    23,  23,  23,  23,  23,  24,  0,   0,   23,  23,  23,  0,   0,   0,   0,   0,   0,   0,   0,   0,   23,  23,  23,
    25,  25,  25,  25,  25,  25,  25,  25,  24,  0,   0,   25,  25,  25,  0,   0,   0,   0,   0,   0,   0,   0,   0,
    25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  24,  0,   0,   26,  26,  26,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   26,  26,  26,  24,  27,  27,  27,  27,  27,  27,  27,  27,  28,  0,   0,   27,  27,  27,  0,   0,
    0,   0,   0,   0,   0,   0,   0,   27,  27,  27,  29,  29,  29,  29,  29,  29,  29,  29,  30,  0,   0,   29,  29,
    29,  0,   0,   0,   0,   0,   0,   0,   0,   0,   29,  29,  29,  31,  31,  31,  31,  31,  31,  31,  31,  30,  0,
    0,   31,  31,  31,  0,   0,   0,   0,   0,   0,   0,   0,   0,   31,  31,  31,  32,  32,  32,  32,  32,  32,  32,
    32,  30,  0,   0,   32,  32,  32,  0,   0,   0,   0,   0,   0,   0,   0,   0,   32,  32,  32,  30,  33,  33,  33,
    33,  33,  33,  33,  33,  34,  0,   0,   33,  33,  33,  0,   0,   0,   0,   0,   0,   0,   0,   0,   33,  33,  33,
    35,  35,  35,  35,  35,  35,  35,  35,  36,  0,   0,   35,  35,  35,  0,   0,   0,   0,   0,   0,   0,   0,   0,
    35,  35,  35,  37,  37,  37,  37,  37,  37,  37,  37,  36,  0,   0,   37,  37,  37,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  36,  0,   0,   38,  38,  38,  0,   0,   0,
    0,   0,   0,   0,   0,   0,   38,  38,  38,  36,  39,  39,  39,  39,  39,  39,  39,  39,  40,  0,   0,   39,  39,
    39,  0,   0,   0,   0,   0,   0,   0,   0,   0,   39,  39,  39,  41,  41,  41,  41,  41,  41,  41,  41,  42,  0,
    0,   41,  41,  41,  0,   0,   0,   0,   0,   0,   0,   0,   0,   41,  41,  41,  43,  43,  43,  43,  43,  43,  43,
    43,  42,  0,   0,   43,  43,  43,  0,   0,   0,   0,   0,   0,   0,   0,   0,   43,  43,  43,  44,  44,  44,  44,
    44,  44,  44,  44,  42,  0,   0,   44,  44,  44,  0,   0,   0,   0,   0,   0,   0,   0,   0,   44,  44,  44,  42,
    45,  45,  45,  45,  45,  45,  45,  45,  46,  0,   0,   45,  45,  45,  0,   0,   0,   0,   0,   0,   0,   0,   0,
    45,  45,  45,  47,  47,  47,  47,  47,  47,  47,  47,  48,  0,   0,   47,  47,  47,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   47,  47,  47,  49,  49,  49,  49,  49,  49,  49,  49,  48,  0,   0,   49,  49,  49,  0,   0,   0,
    0,   0,   0,   0,   0,   0,   49,  49,  49,  50,  50,  50,  50,  50,  50,  50,  50,  48,  0,   0,   50,  50,  50,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   50,  50,  50,  48,  51,  51,  51,  51,  51,  51,  51,  51,  52,  0,
    0,   51,  51,  51,  0,   0,   0,   0,   0,   0,   0,   0,   0,   51,  51,  51,  53,  53,  53,  53,  53,  53,  53,
    53,  54,  0,   0,   53,  53,  53,  0,   0,   0,   0,   0,   0,   0,   0,   0,   53,  53,  53,  55,  55,  55,  55,
    55,  55,  55,  55,  54,  0,   0,   55,  55,  55,  0,   0,   0,   0,   0,   0,   0,   0,   0,   55,  55,  55,  56,
    56,  56,  56,  56,  56,  56,  56,  54,  0,   0,   56,  56,  56,  0,   0,   0,   0,   0,   0,   0,   0,   0,   56,
    56,  56,  54,  57,  58,  59,  57,  57,  57,  57,  57,  60,  0,   0,   61,  61,  61,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   61,  61,  61,  62,  0,   63,  63,  63,  63,  63,  63,  63,  63,  64,  0,   0,   65,  65,  65,  0,
    0,   0,   0,   0,   0,   0,   0,   0,   65,  65,  65,  66,  67,  68,  66,  66,  66,  66,  66,  69,  0,   70,  70,
    70,  70,  70,  70,  70,  70,  71,  72,  73,  71,  71,  71,  71,  71,  74,  0,   75,  75,  75,  75,  75,  75,  75,
    75,  76,  77,  78,  76,  76,  76,  76,  76,  79,  79,  79,  79,  79,  79,  79,  79,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   80,  80,  76,  76,  76,  76,  76,  76,  76,  76,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   80,  76,  76,  76,  76,  76,  81,  79,  79,  0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   80,  79,  79,  79,  79,  79,  79,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   80,  74,  74,  0,   71,  71,  71,  71,  71,  71,  71,  71,  74,  0,   71,  71,  71,  71,
    71,  82,  75,  75,  74,  0,   75,  75,  75,  75,  75,  75,  69,  69,  0,   66,  66,  66,  66,  66,  66,  66,  66,
    69,  0,   66,  66,  66,  66,  66,  83,  70,  70,  69,  0,   70,  70,  70,  70,  70,  70,  62,  0,   84,  84,  84,
    84,  84,  84,  84,  84,  64,  0,   0,   84,  84,  84,  0,   0,   0,   0,   0,   0,   0,   0,   0,   84,  84,  84,
    85,  85,  85,  85,  85,  85,  85,  85,  64,  0,   0,   85,  85,  85,  0,   0,   0,   0,   0,   0,   0,   0,   0,
    85,  85,  85,  64,  86,  86,  86,  86,  86,  86,  86,  86,  79,  0,   0,   86,  86,  86,  0,   0,   0,   0,   0,
    0,   0,   0,   0,   86,  86,  86,  87,  87,  87,  87,  87,  87,  87,  87,  0,   0,   0,   87,  87,  87,  0,   0,
    0,   0,   0,   0,   0,   80,  0,   87,  87,  87,  88,  88,  88,  88,  88,  88,  88,  88,  0,   0,   0,   88,  88,
    88,  0,   0,   0,   0,   0,   0,   0,   80,  0,   88,  88,  88,  79,  79,  79,  79,  79,  79,  79,  79,  0,   0,
    0,   79,  79,  79,  0,   0,   0,   0,   0,   0,   0,   80,  0,   79,  79,  79,  84,  84,  84,  84,  84,  84,  84,
    84,  64,  0,   0,   84,  84,  84,  0,   0,   0,   0,   0,   0,   0,   0,   0,   84,  84,  84,  62,  0,   89,  89,
    89,  89,  89,  89,  89,  89,  64,  0,   0,   65,  65,  65,  0,   0,   0,   0,   0,   0,   0,   0,   0,   65,  65,
    65,  62,  0,   90,  90,  90,  90,  90,  90,  90,  90,  64,  0,   0,   84,  84,  84,  0,   0,   0,   0,   0,   0,
    0,   0,   0,   84,  84,  84,  62,  0,   85,  85,  85,  85,  85,  85,  85,  85,  64,  0,   0,   85,  85,  85,  0,
    0,   0,   0,   0,   0,   0,   0,   0,   85,  85,  85,  62,  0,   89,  89,  89,  89,  89,  91,  63,  63,  64,  0,
    0,   65,  65,  65,  0,   0,   0,   0,   0,   0,   0,   0,   0,   65,  65,  65,  62,  0,   90,  90,  90,  90,  90,
    90,  84,  84,  64,  0,   0,   84,  84,  84,  0,   0,   0,   0,   0,   0,   0,   0,   0,   84,  84,  84,  86,  86,
    86,  86,  86,  86,  86,  86,  0,   0,   0,   86,  86,  86,  0,   0,   0,   0,   0,   0,   0,   80,  0,   86,  86,
    86,  65,  65,  65,  65,  65,  65,  65,  65,  64,  0,   0,   65,  65,  65,  0,   0,   0,   0,   0,   0,   0,   0,
    0,   65,  65,  65,  92,  93,  94,  92,  92,  92,  92,  92,  0,   0,   0,   95,  95,  95,  0,   0,   0,   0,   0,
    0,   0,   80,  0,   95,  95,  95,  62,  0,   96,  96,  96,  96,  96,  96,  96,  96,  97,  0,   0,   98,  98,  98,
    0,   0,   0,   0,   0,   0,   0,   80,  0,   98,  98,  98,  62,  0,   99,  99,  99,  99,  99,  99,  99,  99,  97,
    0,   0,   99,  99,  99,  0,   0,   0,   0,   0,   0,   0,   80,  0,   99,  99,  99,  100, 100, 100, 100, 100, 100,
    100, 100, 97,  0,   0,   100, 100, 100, 0,   0,   0,   0,   0,   0,   0,   80,  0,   100, 100, 100, 97,  0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   80,  86,  86,  86,  86,  86,  86,  86,  86,  0,   0,   0,   86,
    86,  86,  0,   0,   0,   0,   0,   0,   0,   0,   0,   86,  86,  86,  99,  99,  99,  99,  99,  99,  99,  99,  97,
    0,   0,   99,  99,  99,  0,   0,   0,   0,   0,   0,   0,   80,  0,   99,  99,  99,  62,  0,   101, 101, 101, 101,
    101, 101, 101, 101, 97,  0,   0,   98,  98,  98,  0,   0,   0,   0,   0,   0,   0,   80,  0,   98,  98,  98,  62,
    0,   102, 102, 102, 102, 102, 102, 102, 102, 97,  0,   0,   99,  99,  99,  0,   0,   0,   0,   0,   0,   0,   80,
    0,   99,  99,  99,  62,  0,   100, 100, 100, 100, 100, 100, 100, 100, 97,  0,   0,   100, 100, 100, 0,   0,   0,
    0,   0,   0,   0,   80,  0,   100, 100, 100, 62,  0,   101, 101, 101, 101, 101, 103, 96,  96,  97,  0,   0,   98,
    98,  98,  0,   0,   0,   0,   0,   0,   0,   80,  0,   98,  98,  98,  62,  0,   102, 102, 102, 102, 102, 102, 99,
    99,  97,  0,   0,   99,  99,  99,  0,   0,   0,   0,   0,   0,   0,   80,  0,   99,  99,  99,  98,  98,  98,  98,
    98,  98,  98,  98,  97,  0,   0,   98,  98,  98,  0,   0,   0,   0,   0,   0,   0,   80,  0,   98,  98,  98,  104,
    105, 106, 104, 104, 104, 104, 104, 0,   0,   0,   107, 107, 107, 0,   0,   0,   0,   0,   0,   0,   80,  0,   107,
    107, 107, 62,  0,   108, 108, 108, 108, 108, 108, 108, 108, 109, 0,   0,   110, 110, 110, 0,   0,   0,   0,   0,
    0,   0,   80,  0,   110, 110, 110, 62,  0,   111, 111, 111, 111, 111, 111, 111, 111, 109, 0,   0,   111, 111, 111,
    0,   0,   0,   0,   0,   0,   0,   80,  0,   111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 109, 0,   0,
    112, 112, 112, 0,   0,   0,   0,   0,   0,   0,   80,  0,   112, 112, 112, 109, 0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   80,  92,  93,  94,  92,  92,  92,  92,  92,  0,   0,   0,   95,  95,  95,  0,   0,   0,
    0,   0,   0,   0,   0,   0,   95,  95,  95,  111, 111, 111, 111, 111, 111, 111, 111, 109, 0,   0,   111, 111, 111,
    0,   0,   0,   0,   0,   0,   0,   80,  0,   111, 111, 111, 62,  0,   113, 113, 113, 113, 113, 113, 113, 113, 109,
    0,   0,   110, 110, 110, 0,   0,   0,   0,   0,   0,   0,   80,  0,   110, 110, 110, 62,  0,   114, 114, 114, 114,
    114, 114, 114, 114, 109, 0,   0,   111, 111, 111, 0,   0,   0,   0,   0,   0,   0,   80,  0,   111, 111, 111, 62,
    0,   112, 112, 112, 112, 112, 112, 112, 112, 109, 0,   0,   112, 112, 112, 0,   0,   0,   0,   0,   0,   0,   80,
    0,   112, 112, 112, 62,  0,   113, 113, 113, 113, 113, 115, 108, 108, 109, 0,   0,   110, 110, 110, 0,   0,   0,
    0,   0,   0,   0,   80,  0,   110, 110, 110, 62,  0,   114, 114, 114, 114, 114, 114, 111, 111, 109, 0,   0,   111,
    111, 111, 0,   0,   0,   0,   0,   0,   0,   80,  0,   111, 111, 111, 110, 110, 110, 110, 110, 110, 110, 110, 109,
    0,   0,   110, 110, 110, 0,   0,   0,   0,   0,   0,   0,   80,  0,   110, 110, 110, 116, 117, 118, 116, 116, 116,
    116, 116, 0,   0,   0,   119, 119, 119, 0,   0,   0,   0,   0,   0,   0,   80,  0,   119, 119, 119, 62,  0,   120,
    120, 120, 120, 120, 120, 120, 120, 121, 0,   0,   122, 122, 122, 0,   0,   0,   0,   0,   0,   0,   80,  0,   122,
    122, 122, 62,  0,   123, 123, 123, 123, 123, 123, 123, 123, 121, 0,   0,   123, 123, 123, 0,   0,   0,   0,   0,
    0,   0,   80,  0,   123, 123, 123, 124, 124, 124, 124, 124, 124, 124, 124, 121, 0,   0,   124, 124, 124, 0,   0,
    0,   0,   0,   0,   0,   80,  0,   124, 124, 124, 121, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    80,  104, 105, 106, 104, 104, 104, 104, 104, 0,   0,   0,   107, 107, 107, 0,   0,   0,   0,   0,   0,   0,   0,
    0,   107, 107, 107, 123, 123, 123, 123, 123, 123, 123, 123, 121, 0,   0,   123, 123, 123, 0,   0,   0,   0,   0,
    0,   0,   80,  0,   123, 123, 123, 62,  0,   125, 125, 125, 125, 125, 125, 125, 125, 121, 0,   0,   122, 122, 122,
    0,   0,   0,   0,   0,   0,   0,   80,  0,   122, 122, 122, 62,  0,   126, 126, 126, 126, 126, 126, 126, 126, 121,
    0,   0,   123, 123, 123, 0,   0,   0,   0,   0,   0,   0,   80,  0,   123, 123, 123, 62,  0,   124, 124, 124, 124,
    124, 124, 124, 124, 121, 0,   0,   124, 124, 124, 0,   0,   0,   0,   0,   0,   0,   80,  0,   124, 124, 124, 62,
    0,   125, 125, 125, 125, 125, 127, 120, 120, 121, 0,   0,   122, 122, 122, 0,   0,   0,   0,   0,   0,   0,   80,
    0,   122, 122, 122, 62,  0,   126, 126, 126, 126, 126, 126, 123, 123, 121, 0,   0,   123, 123, 123, 0,   0,   0,
    0,   0,   0,   0,   80,  0,   123, 123, 123, 122, 122, 122, 122, 122, 122, 122, 122, 121, 0,   0,   122, 122, 122,
    0,   0,   0,   0,   0,   0,   0,   80,  0,   122, 122, 122, 128, 129, 130, 128, 128, 128, 128, 128, 0,   0,   0,
    131, 131, 131, 0,   0,   0,   0,   0,   0,   0,   80,  0,   131, 131, 131, 62,  0,   132, 132, 132, 132, 132, 132,
    132, 132, 133, 0,   0,   134, 134, 134, 0,   0,   0,   0,   0,   0,   0,   80,  0,   134, 134, 134, 62,  0,   135,
    135, 135, 135, 135, 135, 135, 135, 133, 0,   0,   135, 135, 135, 0,   0,   0,   0,   0,   0,   0,   80,  0,   135,
    135, 135, 136, 136, 136, 136, 136, 136, 136, 136, 133, 0,   0,   136, 136, 136, 0,   0,   0,   0,   0,   0,   0,
    80,  0,   136, 136, 136, 133, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   80,  116, 117, 118, 116,
    116, 116, 116, 116, 0,   0,   0,   119, 119, 119, 0,   0,   0,   0,   0,   0,   0,   0,   0,   119, 119, 119, 135,
    135, 135, 135, 135, 135, 135, 135, 133, 0,   0,   135, 135, 135, 0,   0,   0,   0,   0,   0,   0,   80,  0,   135,
    135, 135, 62,  0,   137, 137, 137, 137, 137, 137, 137, 137, 133, 0,   0,   134, 134, 134, 0,   0,   0,   0,   0,
    0,   0,   80,  0,   134, 134, 134, 62,  0,   138, 138, 138, 138, 138, 138, 138, 138, 133, 0,   0,   135, 135, 135,
    0,   0,   0,   0,   0,   0,   0,   80,  0,   135, 135, 135, 62,  0,   136, 136, 136, 136, 136, 136, 136, 136, 133,
    0,   0,   136, 136, 136, 0,   0,   0,   0,   0,   0,   0,   80,  0,   136, 136, 136, 62,  0,   137, 137, 137, 137,
    137, 139, 132, 132, 133, 0,   0,   134, 134, 134, 0,   0,   0,   0,   0,   0,   0,   80,  0,   134, 134, 134, 62,
    0,   138, 138, 138, 138, 138, 138, 135, 135, 133, 0,   0,   135, 135, 135, 0,   0,   0,   0,   0,   0,   0,   80,
    0,   135, 135, 135, 134, 134, 134, 134, 134, 134, 134, 134, 133, 0,   0,   134, 134, 134, 0,   0,   0,   0,   0,
    0,   0,   80,  0,   134, 134, 134, 140, 141, 142, 140, 140, 140, 140, 140, 0,   0,   0,   143, 143, 143, 0,   0,
    0,   0,   0,   0,   0,   80,  0,   143, 143, 143, 62,  0,   144, 144, 144, 144, 144, 144, 144, 144, 145, 0,   0,
    146, 146, 146, 0,   0,   0,   0,   0,   0,   0,   80,  0,   146, 146, 146, 62,  0,   147, 147, 147, 147, 147, 147,
    147, 147, 145, 0,   0,   147, 147, 147, 0,   0,   0,   0,   0,   0,   0,   80,  0,   147, 147, 147, 148, 148, 148,
    148, 148, 148, 148, 148, 145, 0,   0,   148, 148, 148, 0,   0,   0,   0,   0,   0,   0,   80,  0,   148, 148, 148,
    145, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   80,  128, 129, 130, 128, 128, 128, 128, 128, 0,
    0,   0,   131, 131, 131, 0,   0,   0,   0,   0,   0,   0,   0,   0,   131, 131, 131, 147, 147, 147, 147, 147, 147,
    147, 147, 145, 0,   0,   147, 147, 147, 0,   0,   0,   0,   0,   0,   0,   80,  0,   147, 147, 147, 62,  0,   149,
    149, 149, 149, 149, 149, 149, 149, 145, 0,   0,   146, 146, 146, 0,   0,   0,   0,   0,   0,   0,   80,  0,   146,
    146, 146, 62,  0,   150, 150, 150, 150, 150, 150, 150, 150, 145, 0,   0,   147, 147, 147, 0,   0,   0,   0,   0,
    0,   0,   80,  0,   147, 147, 147, 62,  0,   148, 148, 148, 148, 148, 148, 148, 148, 145, 0,   0,   148, 148, 148,
    0,   0,   0,   0,   0,   0,   0,   80,  0,   148, 148, 148, 62,  0,   149, 149, 149, 149, 149, 151, 144, 144, 145,
    0,   0,   146, 146, 146, 0,   0,   0,   0,   0,   0,   0,   80,  0,   146, 146, 146, 62,  0,   150, 150, 150, 150,
    150, 150, 147, 147, 145, 0,   0,   147, 147, 147, 0,   0,   0,   0,   0,   0,   0,   80,  0,   147, 147, 147, 146,
    146, 146, 146, 146, 146, 146, 146, 145, 0,   0,   146, 146, 146, 0,   0,   0,   0,   0,   0,   0,   80,  0,   146,
    146, 146, 152, 153, 154, 155, 153, 153, 153, 153, 153, 0,   0,   0,   156, 156, 156, 0,   0,   0,   0,   0,   0,
    0,   80,  0,   156, 156, 156, 62,  0,   157, 157, 157, 157, 157, 157, 157, 157, 158, 0,   0,   159, 159, 159, 0,
    0,   0,   0,   0,   0,   0,   80,  0,   159, 159, 159, 62,  0,   160, 160, 160, 160, 160, 160, 160, 160, 158, 0,
    0,   160, 160, 160, 0,   0,   0,   0,   0,   0,   0,   80,  0,   160, 160, 160, 161, 161, 161, 161, 161, 161, 161,
    161, 158, 0,   0,   161, 161, 161, 0,   0,   0,   0,   0,   0,   0,   80,  0,   161, 161, 161, 158, 0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   80,  140, 141, 142, 140, 140, 140, 140, 140, 0,   0,   0,   143, 143,
    143, 0,   0,   0,   0,   0,   0,   0,   0,   0,   143, 143, 143, 160, 160, 160, 160, 160, 160, 160, 160, 158, 0,
    0,   160, 160, 160, 0,   0,   0,   0,   0,   0,   0,   80,  0,   160, 160, 160, 62,  0,   162, 162, 162, 162, 162,
    162, 162, 162, 158, 0,   0,   159, 159, 159, 0,   0,   0,   0,   0,   0,   0,   80,  0,   159, 159, 159, 62,  0,
    163, 163, 163, 163, 163, 163, 163, 163, 158, 0,   0,   160, 160, 160, 0,   0,   0,   0,   0,   0,   0,   80,  0,
    160, 160, 160, 62,  0,   161, 161, 161, 161, 161, 161, 161, 161, 158, 0,   0,   161, 161, 161, 0,   0,   0,   0,
    0,   0,   0,   80,  0,   161, 161, 161, 62,  0,   162, 162, 162, 162, 162, 164, 157, 157, 158, 0,   0,   159, 159,
    159, 0,   0,   0,   0,   0,   0,   0,   80,  0,   159, 159, 159, 62,  0,   163, 163, 163, 163, 163, 163, 160, 160,
    158, 0,   0,   160, 160, 160, 0,   0,   0,   0,   0,   0,   0,   80,  0,   160, 160, 160, 159, 159, 159, 159, 159,
    159, 159, 159, 158, 0,   0,   159, 159, 159, 0,   0,   0,   0,   0,   0,   0,   80,  0,   159, 159, 159, 166, 9,
    10,  10,  10,  10,  10,  11,  9,   167, 169, 0,   170, 169, 171, 167, 169, 169, 4,   172, 173, 174, 172, 172, 172,
    172, 172, 0,   0,   175, 171, 171, 171, 171, 171, 171, 171, 171, 171, 176, 0,   169, 171, 171, 171, 171, 171, 171,
    171, 171, 171, 3,   0,   1,   3,   3,   178, 3,   3,   179, 3,   3,   3,   3,   3,   3,   3,   3,   180, 181, 182,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   169, 0,
    170, 169, 169, 167, 169, 169, 4,   172, 173, 174, 172, 172, 172, 172, 172, 0,   0,   175, 169, 169, 169, 169, 169,
    169, 169, 169, 169, 176, 0,   169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 184, 0,   0,   0,   184, 184, 185,
    184, 184, 184, 184, 184, 184, 184, 184, 0,   0,   186, 184, 184, 184, 184, 184, 184, 184, 184, 184, 0,   0,   184,
    184, 184, 184, 184, 184, 184, 184, 184, 184, 175, 175, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   188, 188, 188, 188, 188, 188, 188, 188,
    188, 188, 191, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 0,   0,   194, 193, 193, 193,
    193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 0,   0,   3,   0,   1,   3,   3,   178, 3,   196, 179, 197,
    197, 197, 197, 197, 197, 197, 197, 180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   3,   179, 199, 200, 201, 199, 199, 199,
    199, 199, 180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   203, 179, 204, 204, 204, 204, 204, 204, 204, 204, 180, 181, 182,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,
    1,   3,   3,   178, 3,   3,   179, 206, 207, 208, 206, 206, 206, 206, 206, 180, 181, 182, 3,   3,   3,   3,   3,
    3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,
    210, 179, 211, 211, 211, 211, 211, 211, 211, 211, 180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,
    0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   3,   179, 213, 214, 215,
    213, 213, 213, 213, 213, 180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   217, 3,   3,   218, 219, 219, 219, 219, 219, 219, 219, 219,
    220, 221, 222, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   0,   1,   3,   3,   217, 3,   3,   218, 3,   3,   3,   3,   3,   3,   3,   3,   220, 221, 222, 3,   3,
    3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   225, 0,   0,   226,
    227, 227, 227, 227, 227, 227, 227, 227, 0,   228, 229, 225, 0,   0,   226, 231, 231, 231, 231, 231, 231, 231, 231,
    0,   228, 229, 225, 0,   0,   226, 233, 233, 233, 233, 233, 233, 233, 233, 0,   228, 229, 225, 0,   0,   226, 0,
    0,   0,   0,   0,   0,   0,   0,   0,   228, 229, 236, 0,   0,   237, 0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   238, 0,   0,   0,   0,   0,   0,   0,   239, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   239, 241,
    0,   0,   242, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   243, 245, 0,   0,   246, 0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   247, 0,   0,   0,   0,   0,   0,   0,   248, 0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   248, 250, 0,   0,   251, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   252, 225, 0,   0,   226, 254,
    254, 254, 254, 254, 254, 254, 254, 0,   228, 229, 225, 0,   0,   226, 254, 254, 254, 254, 254, 256, 227, 227, 0,
    228, 229, 225, 0,   0,   226, 227, 227, 227, 227, 227, 258, 231, 231, 0,   228, 229, 225, 0,   0,   226, 231, 231,
    231, 260, 233, 233, 233, 233, 0,   228, 229, 225, 0,   0,   226, 233, 233, 233, 233, 233, 233, 0,   0,   0,   228,
    229, 3,   0,   1,   3,   3,   217, 3,   3,   218, 213, 213, 213, 213, 213, 213, 213, 213, 220, 221, 222, 3,   3,
    3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,
    3,   217, 3,   3,   218, 213, 213, 213, 213, 213, 264, 219, 219, 220, 221, 222, 3,   3,   3,   3,   3,   3,   3,
    3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   217, 3,   3,   218,
    219, 219, 219, 219, 219, 219, 3,   3,   220, 221, 222, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   210, 179, 3,   3,   3,   3,   3,
    3,   3,   3,   180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   210, 179, 206, 206, 206, 206, 206, 206, 206, 206, 180, 181,
    182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    0,   1,   3,   3,   178, 3,   210, 179, 206, 206, 206, 206, 206, 269, 211, 211, 180, 181, 182, 3,   3,   3,   3,
    3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178,
    3,   210, 179, 211, 211, 211, 211, 211, 211, 3,   3,   180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,
    0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   203, 179, 3,   3,
    3,   3,   3,   3,   3,   3,   180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   203, 179, 199, 199, 199, 199, 199, 199, 199,
    199, 180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   3,   3,   0,   1,   3,   3,   178, 3,   203, 179, 199, 199, 199, 199, 199, 274, 204, 204, 180, 181, 182, 3,
    3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,
    3,   3,   178, 3,   203, 179, 204, 204, 204, 204, 204, 204, 3,   3,   180, 181, 182, 3,   3,   3,   3,   3,   3,
    3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   196,
    179, 3,   3,   3,   3,   3,   3,   3,   3,   180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,
    3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   196, 179, 278, 278, 278, 278,
    278, 278, 278, 278, 180, 181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,
    3,   3,   3,   3,   3,   3,   0,   1,   3,   3,   178, 3,   196, 179, 278, 278, 278, 278, 278, 280, 197, 197, 180,
    181, 182, 3,   3,   3,   3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,
    3,   0,   1,   3,   3,   178, 3,   196, 179, 197, 197, 197, 197, 197, 197, 3,   3,   180, 181, 182, 3,   3,   3,
    3,   3,   3,   3,   3,   3,   0,   0,   3,   3,   3,   3,   3,   3,   3,   3,   3,   3,   283, 0,   0,   284, 0,
    0,   0,   0,   0,   0,   0,   0,   285, 286, 287, 3,   0,   1,   3,   289, 178, 3,   3,   179, 3,   3,   3,   3,
    3,   3,   3,   3,   290, 181, 182, 289, 289, 289, 289, 289, 289, 289, 289, 289, 0,   0,   3,   289, 289, 289, 289,
    289, 289, 289, 289, 289, 0};

static const short _connspec_index_defaults[] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,   0,   0, 0, 0, 0};

static const short _connspec_cond_targs[] = {
    0,   1,   2,   159, 3,   161, 4,   164, 5,   174, 182, 183, 6,   7,   10,  8,   9,   178, 11,  180, 12,  13,  142,
    14,  17,  15,  16,  18,  129, 19,  22,  20,  21,  23,  116, 24,  27,  25,  26,  28,  103, 29,  32,  30,  31,  33,
    90,  34,  37,  35,  36,  38,  77,  39,  42,  40,  41,  43,  70,  73,  75,  76,  44,  62,  65,  69,  45,  59,  60,
    46,  58,  47,  55,  56,  48,  54,  49,  51,  52,  50,  202, 53,  57,  61,  63,  64,  66,  67,  68,  71,  72,  74,
    78,  84,  87,  89,  79,  82,  83,  80,  81,  85,  86,  88,  91,  97,  100, 102, 92,  95,  96,  93,  94,  98,  99,
    101, 104, 110, 113, 115, 105, 108, 109, 106, 107, 111, 112, 114, 117, 123, 126, 128, 118, 121, 122, 119, 120, 124,
    125, 127, 130, 136, 139, 141, 131, 134, 135, 132, 133, 137, 138, 140, 143, 144, 150, 153, 155, 145, 148, 149, 146,
    147, 151, 152, 154, 156, 157, 160, 158, 159, 1,   203, 166, 199, 200, 163, 12,  159, 160, 3,   5,   6,   163, 161,
    161, 162, 163, 162, 4,   164, 165, 163, 165, 165, 163, 166, 167, 198, 167, 168, 195, 196, 168, 169, 194, 169, 170,
    191, 192, 170, 171, 190, 171, 172, 187, 188, 172, 160, 3,   173, 5,   6,   163, 173, 174, 160, 3,   175, 6,   163,
    175, 176, 176, 177, 177, 178, 160, 3,   163, 179, 179, 160, 3,   163, 180, 160, 3,   163, 181, 181, 160, 3,   163,
    182, 174, 183, 184, 184, 185, 185, 186, 186, 187, 188, 189, 189, 190, 191, 192, 193, 193, 194, 195, 196, 197, 197,
    198, 199, 166, 200, 201, 201, 202, 160, 3,   5,   6,   163, 203, 203, 156, 0};

static const signed char _connspec_cond_actions[] = {
    0,  0,  0,  0,  0,  1,  0,  2,  0,  3,  3,  3, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  4,  4,  5,  4,  4, 4,  0,  4,  6,  6,  6,  7,  7,  6,  8,  0,  8, 8,  0,  9,
    10, 11, 10, 12, 0,  12, 6,  0,  0,  6,  0,  0, 0,  6,  0,  0,  6,  0,  0,  0,  6,  0,  0,  6, 0,  0,  0,
    13, 13, 13, 0,  14, 14, 13, 13, 15, 15, 15, 0, 16, 15, 15, 0,  15, 0,  15, 17, 17, 17, 17, 0, 18, 18, 18,
    18, 19, 19, 19, 19, 0,  20, 20, 20, 20, 15, 0, 15, 0,  15, 0,  15, 0,  15, 13, 13, 0,  13, 6, 6,  6,  0,
    6,  6,  6,  6,  0,  6,  6,  6,  0,  6,  0,  6, 21, 21, 21, 22, 22, 21, 6,  0,  23, 0};

static const short _connspec_eof_trans[] = {
    1,   2,   3,   5,   7,   9,   13,  14,  16,  17,  15,  19,  21,  22,  24,  26,  27,  25,  28,  30,  32,  33,  31,
    34,  36,  38,  39,  37,  40,  42,  44,  45,  43,  46,  48,  50,  51,  49,  52,  54,  56,  57,  55,  58,  63,  67,
    70,  72,  75,  77,  80,  78,  79,  82,  76,  73,  74,  83,  71,  68,  69,  84,  64,  85,  86,  65,  87,  88,  89,
    66,  59,  90,  91,  60,  92,  61,  62,  53,  93,  97,  100, 101, 98,  99,  94,  102, 103, 95,  104, 96,  47,  105,
    109, 112, 113, 110, 111, 106, 114, 115, 107, 116, 108, 41,  117, 121, 124, 125, 122, 123, 118, 126, 127, 119, 128,
    120, 35,  129, 133, 136, 137, 134, 135, 130, 138, 139, 131, 140, 132, 29,  141, 145, 148, 149, 146, 147, 142, 150,
    151, 143, 152, 144, 23,  153, 154, 158, 161, 162, 159, 160, 155, 163, 164, 156, 165, 157, 166, 167, 169, 178, 168,
    184, 188, 176, 190, 193, 196, 199, 203, 206, 210, 213, 217, 224, 225, 231, 233, 235, 236, 241, 245, 250, 254, 256,
    258, 260, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 282, 283, 289, 0};

static const int connspec_start = 158;
static const int connspec_first_final = 158;
static const int connspec_error = 0;

static const int connspec_en_main = 158;

lcb_STATUS parse_connspec(const char *specstr, size_t specstr_len, lcb::Connspec &spec)
{
    const char *p = specstr;
    const char *pe = specstr + specstr_len;
    const char *eof = pe;
    int cs;

    const char *scheme;
    const char *bucket;
    const char *kb, *ke, *vb, *ve; /* option key and value boundaries */

    const char *address;
    const char *port;
    lcb::Spechost node;

    {
        cs = (int)connspec_start;
    }

    {
        unsigned int _trans = 0;
        const char *_keys;
        const short *_inds;
        int _ic;
    _resume : {
    }
        if (p == pe && p != eof)
            goto _out;
        if (p == eof) {
            if (_connspec_eof_trans[cs] > 0) {
                _trans = (unsigned int)_connspec_eof_trans[cs] - 1;
            }
        } else {
            _keys = (_connspec_trans_keys + ((cs << 1)));
            _inds = (_connspec_indicies + (_connspec_index_offsets[cs]));

            if (((*(p))) <= 126 && ((*(p))) >= 33) {
                _ic = (int)_connspec_char_class[(int)((*(p))) - 33];
                if (_ic <= (int)(*(_keys + 1)) && _ic >= (int)(*(_keys)))
                    _trans = (unsigned int)(*(_inds + (int)(_ic - (int)(*(_keys)))));
                else
                    _trans = (unsigned int)_connspec_index_defaults[cs];
            } else {
                _trans = (unsigned int)_connspec_index_defaults[cs];
            }
        }
        cs = (int)_connspec_cond_targs[_trans];

        if (_connspec_cond_actions[_trans] != 0) {

            switch (_connspec_cond_actions[_trans]) {
                case 1: {
                    {
                        bucket = p;
                    }

                    break;
                }
                case 8: {
                    {
                        spec.set_bucket(std::string(bucket, p));
                    }

                    break;
                }
                case 4: {
                    {
                        address = p;
                    }

                    break;
                }
                case 3: {
                    {
                        port = p;
                    }

                    break;
                }
                case 16: {
                    {
                        node.port = std::stoi(std::string(port, p));
                    }

                    break;
                }
                case 9: {
                    {
                        kb = p;
                    }

                    break;
                }
                case 2: {
                    {
                        ke = p;
                    }

                    break;
                }
                case 11: {
                    {
                        vb = p;
                    }

                    break;
                }
                case 5: {
                    {
                        scheme = p;
                    }

                    {
                        address = p;
                    }

                    break;
                }
                case 22: {
                    {
                        node.htype = LCB_HOST_TYPE_IPV6;
                    }

                    {
                        node.hostname = std::string(address, p);
                    }

                    break;
                }
                case 7: {
                    {
                        node.htype = LCB_HOST_TYPE_DNS;
                    }

                    {
                        node.hostname = std::string(address, p);
                    }

                    break;
                }
                case 17: {
                    {
                        node.btype = LCB_BOOTSTRAP_TYPE_HTTP;
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
                case 19: {
                    {
                        node.btype = LCB_BOOTSTRAP_TYPE_MCD;
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
                case 18: {
                    {
                        node.btype = LCB_BOOTSTRAP_TYPE_HTTPS;
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
                case 20: {
                    {
                        node.btype = LCB_BOOTSTRAP_TYPE_MCDS;
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
                case 15: {
                    {
                        node.port = std::stoi(std::string(port, p));
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
                case 12: {
                    {
                        ve = p;
                    }

                    {
                        spec.set_option(std::string(kb, ke), std::string(vb, ve));
                    }

                    break;
                }
                case 23: {
                    {
                        spec.set_scheme(std::string(scheme, p));
                    }

                    {
                        node.htype = LCB_HOST_TYPE_DNS;
                    }

                    {
                        node.hostname = std::string(address, p);
                    }

                    break;
                }
                case 21: {
                    {
                        node.htype = LCB_HOST_TYPE_IPV6;
                    }

                    {
                        node.hostname = std::string(address, p);
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
                case 14: {
                    {
                        node.htype = LCB_HOST_TYPE_DNS;
                    }

                    {
                        node.htype = LCB_HOST_TYPE_IPV4;
                    }

                    {
                        node.hostname = std::string(address, p);
                    }

                    break;
                }
                case 6: {
                    {
                        node.htype = LCB_HOST_TYPE_DNS;
                    }

                    {
                        node.hostname = std::string(address, p);
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
                case 10: {
                    {
                        vb = p;
                    }

                    {
                        ve = p;
                    }

                    {
                        spec.set_option(std::string(kb, ke), std::string(vb, ve));
                    }

                    break;
                }
                case 13: {
                    {
                        node.htype = LCB_HOST_TYPE_DNS;
                    }

                    {
                        node.htype = LCB_HOST_TYPE_IPV4;
                    }

                    {
                        node.hostname = std::string(address, p);
                    }

                    {
                        spec.add_host(node);
                        node = {};
                    }

                    break;
                }
            }
        }

        if (p == eof) {
            if (cs >= 158)
                goto _out;
        } else {
            if (cs != 0) {
                p += 1;
                goto _resume;
            }
        }
    _out : {
    }
    }

    if (p != eof || cs < 158) {
        return LCB_EINVAL;
    }
    return LCB_SUCCESS;
}
} // namespace lcb
